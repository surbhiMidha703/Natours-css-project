/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* animation can be achieved either by using keyframes or transition property.

Generally on page load(initial state of the component) we use keyframes and assign that to the animation property

Transition property is mostly used when the elemnt is hovered on, clicked(active) 
*/


/*  here '*' denotes all the elements on the page, we have also included
psudo elements - before and after,
border-sizing property will now be inherited from body element */

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/* This is to set the root font size. By default the root font size 16px
NOTE - 1rem = 10px,  rem always depends on the root font size, here it is 10px 

NOTE - we avoid em, because that depends on parent font size, and involves lots of calculations*/
html{
    /* font-size: 10px; */
    /* Now instead of putting 10px directly, lets convert this into % so that when the user changes the font size in the browser,
    the font-size percentage is automatically calculated, 
    at the moment if we want to keep it 10px, then its % will be :
    10/16*100 = 62.5%
    If the user now changes the default font size to 12px(or anything else) from the browser,
    then the % will be recalculated and the html font size will be:
    12/16*100 = 75%
    This will then influence the subsequent rem sizes in the app */

    font-size: 62.5%;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;

    /* this property helps to include padding and border to the width and height of the element so that the element does not look too big */
    box-sizing: border-box;  
}

.header {
    position: relative;
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.8),
        rgba(40, 180, 131, 0.8)),
    url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /* to avoid shaking of the element that commonly happens in animation */

    backface-visibility: hidden;   
    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*
        animation-iteration-count: 3;
        animation-delay: 3s;
    */

}

.heading-primary--sub {
    display: block;
    font-size: 2rem;;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out;

    /* or
    animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    */
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translate(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translate(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}

.btn:hover{
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}

.btn:active{
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

/* pseudo property after is used to add a psudo element behind the actual element */
.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    /* transition is always put in initial state */
    transition: all .4s;

    
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after{
    /* scale property makes size bigger in X or Y direction */
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    /* this class is for the initial state of the button, i.e. when the page loads */

    /* animation: animation-name, duration, animation-timing-function and delay */
    animation: moveInBottom .5s ease-out .75s;

    /* automatically apply 0% styles in animation moverInBottom,
    before animation starts so that the button is visible only when the page loads and not before it */
    animation-fill-mode: backwards;  
}